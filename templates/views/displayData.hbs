<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Display Data</title>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.68/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.68/vfs_fonts.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script>
        
 function downloadCSV() {
            const table = document.getElementById('dataTable');
            const rows = table.querySelectorAll('tr');

            // Create a CSV file content
            const csvContent = Array.from(rows, row => {
                const cols = row.querySelectorAll('td,th');
                return Array.from(cols, col => col.innerText).join(',');
            }).join('\n');

            // Create a Blob and create a download link
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = 'table_data.csv';
            link.click();
        }


function downloadPdf() 
{
        if (typeof pdfMake !== 'undefined') {
    const data = [];
    const table = document.getElementById('dataTable');

    // Limit the number of rows to 10
    const numRows = table.rows.length;


    // Define the font size for the table cells (e.g., 8)
    const cellFontSize = 7;

    // Iterate over rows
    for (let i = 0; i < numRows; i++) {
        const row = table.rows[i];
        const rowData = [];

        // Iterate over cells
        for (let j = 0; j < row.cells.length; j++) {
            const cellText = row.cells[j].innerText;

            // Check if it's the first row to make it bold
            const fontWeight = i == 0 ? 'bold' : 'normal';

            // Check if the cell text is defined
            if (typeof cellText !== 'undefined') {
                rowData.push({ text: cellText, fontSize: cellFontSize, bold: fontWeight });
            } else {
                // If the cell text is undefined, push an empty string
                rowData.push({ text: '', fontSize: cellFontSize, bold: fontWeight });
            }
        }

        data.push(rowData);
    }

    // Ensure that there is data
    if (data.length > 0) {
        const docDefinition = {
            content: [
                {
                    table: {
                        headerRows: 1,
                        body: data,
                        fontSize: cellFontSize, // Set the font size for the entire table
                    },
                },
            ],
        };

        pdfMake.createPdf(docDefinition).download('table_data.pdf');
    } else {
        console.error('No data found in the table.');
    }
} else {
    console.error('pdfMake library is not loaded.');
}


        }
    </script>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items:
                center;
            justify-content: center;
            height: 100vh;
            overflow: hidden;
        }

        .table-container {
            width: 90%;
            overflow: auto;
            margin-top: 20px;
        }

        table {
            border-collapse: collapse;
            width: 100%;
            background-color: #fff;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #3498db;
            color: #ffffff;
            position: sticky;
            top: 0;
            /* Stick to the top */
        }

        tr:hover {
            background-color: #f5f5f5;
        }

        .close-button {
            margin-top: 20px;
            padding: 10px;
            background-color: #3a9ada;
            color: #ff0000;
            text-decoration:
                none;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            position:
                relative;
            left: 47%;
            top: -113px;
        }

        .close-button:hover {
            background-color: #2980b9;
        }
    </style>
</head>
<body>
    <h1>Filtered Students of {{selectedMonth}}</h1>
    <table id="dataTable">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>MobNo</th>
                <th>LicenceNo</th>
                <th>LLRType</th>
                <th>Type</th>
                <th>AddmissionDate</th>
                <th>Total</th>
                <th>Deposite</th>
                <th>Pending</th>
                <th>MDLStatus</th>
                
            </tr>
        </thead>
        <tbody>
            {{#each students}}
                <tr>
                    <td>{{this.ID}}</td>
                    <td>{{this.Name}}</td>
                    <td>{{this.MobNo}}</td>
                    <td>{{this.LicenceNo}}</td>
                    <td>{{this.LLRType}}</td>
                    <td>{{this.Type}}</td>
                    <td>{{this.AddmissionDate}}</td>
                    <td>{{this.Total}}</td>
                    <td>{{this.Deposite}}</td>
                    <td>{{this.Pending}}</td>
                    <td>{{this.MDLStatus}}</td>
                    
                </tr>
            {{/each}}
        </tbody>
    </table>
     <button onclick="downloadPdf()">Download</button><br>
        <button onclick="downloadCSV()">Download CSV</button>
</body>
</html>
